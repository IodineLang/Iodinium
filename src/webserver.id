###
# Name        : webserver
# Author      : @SplittyDev
# Description : Basic webserver
# Please add yourself as author if you make changes
###

use socket, SOCK_STREAM, PROTO_TCP from socket
use printr, printf, reverse from core
use Thread from threading

class WebServer {
  func WebServer (self) {
    self.sock = socket (SOCK_STREAM, PROTO_TCP)

    # Default values
    self.setIndices ({"index.html", "index.htm"})
    self.setPlatform ("linux")
    self.setRoot ("/var/iodinium-www/")
    self.setDefaultMime ("text/plain")
    self.host = "127.0.0.1"
    self.port = 8080
  }

  ### json   : HashMap
  func loadConfiguration (self, json) {
    self.setRoot (json["root"])
    self.setIndices (json["indices"])
    self.setPlatform (json["platform"])
    self.setDefaultMime (json["default_mime"])
    self.setMimes (json["mimes"])
    self.host = json["host"]
    self.port = Int (json["port"])
  }

  ### root    : Str
  func setRoot (self, root) {
    self.root = root
  }

  ### indices : List
  func setIndices (self, indices) {
    self.indices = indices
  }

  ### platform   : Str
  func setPlatform (self, platform) {
    self.platform = platform
  }

  ### mime    : string
  func setDefaultMime (self, mime) {
    self.default_mime = mime
  }

  ### mimes   : HashMap
  func setMimes (self, mimes) {
    self.mimes = mimes
  }

  ### host    : Str
  ### port    : Int
  func listen (self) {
    printf ("Binding socket to {}:{}", self.host, self.port)
    self.sock.bind (self.host, self.port)
    self.sock.listen (100)
     while (true) {
        client = self.sock.accept ()
        printf ("Accepted client")
        trd = Thread (lambda () => { self.handleClient (client) })
        trd.start ()
     }
  }

  ### client  : socket
  func handleClient (self, client) {
    exitLoop = false
    while (!exitLoop && client.connected ()) {
      try {
        accum = ""
        while (client.getBytesAvailable () > 0) {
          accum += client.readLine ()
        }
        request_header = self.parseHeader (accum)
        self.serve (request_header)
      } except (e) {
        exitloop = true
      }
    }
  }

  ### request_header  : HashMap
  func serve (self, request_header) {
    path = extractPath (request_header["path"])
  }

  ### raw_path  : Str
  func extractPath (raw_path) {

  }

  ### mime    : Str
  func isTextMime (self, mime) {
    if (mime.startsWith ("text/"))
      return true
    return false
  }

  ### path    : Str
  func normalizePath (self, path) {
    path = path.replace ("\\", "/")
    if (reverse (path)[0] == "/")
      path = reverse (reverse (path).substr (1))
    return path
  }

  ### path    : Str
  func platformizePath (self, path) {
    path = self.normalizePath (path)
    if (self.platform == "windows")
      path = path.replace ("/", "\\")
    return path
  }

  ### header  : HashMap
  func defaultPage404 (self, header) {
    return sprintf (
       "<h1>404 - File not found</h1>" +
       "<br>The requested URL {} was not found on this server.<br>" +
       "<hr>" +
       "iodinium server at {} Port {}",
       header["path"], self.host, self.port)
  }

  ### header  : HashMap
  func defaultPage500 (self, header) {
    return sprintf (
      "<h1>500 - Internal Server Error</h1>" +
      "<br>Something went wrong.<br>" +
      "<hr>" +
      "iodinium server at {} Port {}",
      header["path"], self.host, self.port)
  }

  # header_str  : Str
  # returns     : HashMap
  func parseHeader (header_str) {
    header = HashMap ()
    i = 0
    lines = header_str.split ("\r\n")
    while (i < len (lines)) {
      line = lines[i].trim ()
      if (i == 0) {
        method = line.substr (0, line.indexOf (" "))
        path = line.substr (line.indexOf (" ") + 1)
        version = reverse (line)
        version = reverse (version.substr (0, version.indexOf (" ")))
        header["Method"] = method.trim ()
        header["Path"] = path.trim ()
        header["Version"] = version.trim ()
      } else if (line == "") {
        i = i + 1
        line = lines[i].trim ()
        if (i < len (lines)) {
          args = HashMap ()
          foreach (arg in line.split ("&")) {
            if (arg.contains ("=")) {
              key = arg.substr (0, arg.indexOf ("=")).trim ()
              val = arg.substr (arg.indexOf ("=") + 1).trim ()
              args[key] = val
            }
          }
          header["args"] = args
        }
      } else {
        if (line.contains (":")) {
          key = line.substr (0, line.indexOf (":")).trim ()
          val = line.substr (line.indexOf (":") + 1).trim ()
          header[key] = val
        }
      }
      i = i + 1
    }
    return header
  }
}
